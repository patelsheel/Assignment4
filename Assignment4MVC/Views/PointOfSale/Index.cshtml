@using StoreDatabase.Entities;

@model OrderInProgress

@{
    var data = new Dictionary<string, string>();
    data.Add("customerId", Model.Customer!.CustomerID.ToString());
    data.Add("orderId", Model.Order?.OrderID.ToString() ?? "0");
    var orderTotal = 0.00f;

}



<div class="container">
    <div class="row">
        <div class="col-md-6">
            <div class="m-1" style="border: solid 3px blue;">
                <h1>Menu Item</h1>
                <div class="row">
                    @foreach (var product in Model.Products!)
                    {
                        <div class="col-md-4">
                            <a class="btn btn-primary btn-block m-1"
                               asp-action="AddItem"
                               asp-controller="PointOfSale"
                               asp-all-route-data="data"
                               asp-route-productId="@product.ProductID"
                               style="min-height: 160px; display: flex; flex-direction: column; justify-content: center; text-align: center; font-weight: bold;">
                                @product.ProductName
                                <br />
                                @($"{product.ProductPrice:$###0.00}")
                            </a>
                        </div>
                    }
                </div>
            </div>
        </div>
        <div class="col-md-6">
            <div class="m-1" style="border: solid 3px blue;">
                <h1>Order</h1>
                <span class="m-1" style="font-weight: bold">Date: @DateTime.Now.ToString("yyyy-MM-dd HH:mm")</span>
                <span class="m-1" style="font-weight: bold">Ticket #: @(Model.Order?.OrderID.ToString() ?? "" )</span>
                <span class="m-1 float-end" style="font-weight: bold">Customer: @($"{Model.Customer!.FirstName} {Model.Customer.LastName}")</span>


                <div class="container">
                    <div class="row">
                        <div class="col-2">
                            <span class="m-1" style="font-weight:bold; text-decoration:underline">Qty</span>
                        </div>

                        <div class="col-8">
                            <span class="m-1" style="font-weight:bold; text-decoration:underline">Item</span>
                        </div>

                        <div class="col-2">
                            <span class="m-1" style="font-weight:bold; text-decoration:underline">Price</span>
                        </div>
                    </div>
                    @if (Model.Order != null && Model.Order.OrderItems.Any())
                    {
                        var orderItems = Model.Order?.OrderItems.GroupBy(g => g.ProductID)
                            .Select(o => new OrderLineItem
                            {
                                Quantity = o.Count(),
                                Product = o.Where(p => p.ProductID == o.Key).First().Product,
                                Price = o.Where(p => p.ProductID == o.Key).First()!.Product!.ProductPrice * o.Count()
                            });
                        foreach (var orderItem in orderItems)
                        {
                            <div class="row">
                                <div class="col-2">
                                    <span class="m-1"> @orderItem.Quantity </span>
                                </div>

                                <div class="col-8">
                                    <span class="m-1"> @(orderItem.Product!.ProductName) </span>
                                </div>

                                <div class="col-2">
                                    <span class="m-1">
                                        @{
                                            var price = orderItem.Product!.ProductPrice;
                                            var quantity = orderItem.Quantity;
                                            var lineTotal = price * quantity;

                                            orderTotal += lineTotal;
                                            WriteLiteral($"{lineTotal:###0.00}");
                                        }

                                    </span>
                                </div>
                            </div>



                        }
                    }
                    <div class="row">
                        <div class="col-2">
                            <span class="m-1"></span>
                        </div>

                        <div class="col-8">
                            <span class="m-1"></span>
                        </div>

                        <div class="col-2">
                            <span class="m-1" style="font-weight:bold; text-decoration:underline">
                                @($"{orderTotal:$###0.00}")
                            </span>
                        </div>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


